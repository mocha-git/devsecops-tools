name: Terraform Security Factory CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  terraform-validation:
    name: üö¶ Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: |
          terraform init -backend=false
          terraform validate

  security-scan:
    name: üîê Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: 
          - tfsec
          - checkov
          - opa
    steps:
      - uses: actions/checkout@v4

      - name: tfsec Scan
        if: matrix.tool == 'tfsec'
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/
          format: sarif
          out: tfsec-results.sarif

      - name: Checkov Scan
        if: matrix.tool == 'checkov'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: modules/
          output_format: sarif
          soft_fail: false

      - name: Setup OPA
        if: matrix.tool == 'opa'
        uses: open-policy-agent/setup-opa@v2
        
      - name: OPA Policy Test
        if: matrix.tool == 'opa'
        run: |
          opa test policies/ -v
          opa eval --data policies/ --input tfplan.json "data.terraform.security"

  automated-tests:
    name: üß™ Terratest & Go Tests
    needs: [terraform-validation, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Run Terratest
        working-directory: tests
        run: |
          go mod init tests || true
          go mod tidy
          go test -v ./...

  release:
    name: üì¶ Create Release
    needs: [automated-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
